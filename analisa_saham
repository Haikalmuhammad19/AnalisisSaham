import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error

# Daftar simbol saham yang ingin dianalisis
symbols = ['AAPL', 'MSFT', 'GOOGL']

# Fungsi untuk mengunduh dan memproses data
def process_stock(symbol):
    data = yf.download(symbol, start='2020-01-01', end='2023-01-01')
    data['Return'] = data['Close'].pct_change()
    data['MA10'] = data['Close'].rolling(window=10).mean()
    data['MA50'] = data['Close'].rolling(window=50).mean()
    data.dropna(inplace=True)

    features = ['Return', 'MA10', 'MA50']
    X = data[features]
    y = data['Close']
    
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    
    model = LinearRegression()
    model.fit(X_train, y_train)
    
    y_pred = model.predict(X_test)
    mae = mean_absolute_error(y_test, y_pred)
    mse = mean_squared_error(y_test, y_pred)
    
    return data, y_test, y_pred, mae, mse

# Iterasi melalui setiap saham dan lakukan analisis
results = {}

for symbol in symbols:
    data, y_test, y_pred, mae, mse = process_stock(symbol)
    results[symbol] = {
        'data': data,
        'y_test': y_test,
        'y_pred': y_pred,
        'mae': mae,
        'mse': mse
    }

    # Visualisasi prediksi vs nilai aktual
    plt.figure(figsize=(14, 7))
    plt.plot(y_test.index, y_test, label='Aktual')
    plt.plot(y_test.index, y_pred, label='Prediksi')
    plt.title(f'Prediksi vs Aktual Harga Penutupan Saham {symbol}')
    plt.xlabel('Tanggal')
    plt.ylabel('Harga (USD)')
    plt.legend()
    plt.show()

    print(f"MAE untuk {symbol}: {mae}")
    print(f"MSE untuk {symbol}: {mse}")

# Menampilkan hasil untuk semua saham
for symbol in symbols:
    print(f"\nHasil Analisis untuk {symbol}:")
    print(f"MAE: {results[symbol]['mae']}")
    print(f"MSE: {results[symbol]['mse']}")
